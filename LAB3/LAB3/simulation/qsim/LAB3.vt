// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/04/2025 21:17:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MEM_WB
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MEM_WB_vlg_sample_tst(
	i_ALUResult,
	i_clock,
	i_enable,
	i_ReadData,
	i_RegDstOut,
	i_reset,
	i_WB_MemToReg,
	i_WB_RegWrite,
	sampler_tx
);
input [7:0] i_ALUResult;
input  i_clock;
input  i_enable;
input [7:0] i_ReadData;
input [2:0] i_RegDstOut;
input  i_reset;
input  i_WB_MemToReg;
input  i_WB_RegWrite;
output sampler_tx;

reg sample;
time current_time;
always @(i_ALUResult or i_clock or i_enable or i_ReadData or i_RegDstOut or i_reset or i_WB_MemToReg or i_WB_RegWrite)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MEM_WB_vlg_check_tst (
	o_ALUResult,
	o_ReadData,
	o_RegDstOut,
	o_WB_MemToReg,
	o_WB_RegWrite,
	sampler_rx
);
input [7:0] o_ALUResult;
input [7:0] o_ReadData;
input [2:0] o_RegDstOut;
input  o_WB_MemToReg;
input  o_WB_RegWrite;
input sampler_rx;

reg [7:0] o_ALUResult_expected;
reg [7:0] o_ReadData_expected;
reg [2:0] o_RegDstOut_expected;
reg  o_WB_MemToReg_expected;
reg  o_WB_RegWrite_expected;

reg [7:0] o_ALUResult_prev;
reg [7:0] o_ReadData_prev;
reg [2:0] o_RegDstOut_prev;
reg  o_WB_MemToReg_prev;
reg  o_WB_RegWrite_prev;

reg [7:0] o_ALUResult_expected_prev;
reg [7:0] o_ReadData_expected_prev;
reg [2:0] o_RegDstOut_expected_prev;
reg  o_WB_MemToReg_expected_prev;
reg  o_WB_RegWrite_expected_prev;

reg [7:0] last_o_ALUResult_exp;
reg [7:0] last_o_ReadData_exp;
reg [2:0] last_o_RegDstOut_exp;
reg  last_o_WB_MemToReg_exp;
reg  last_o_WB_RegWrite_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	o_ALUResult_prev = o_ALUResult;
	o_ReadData_prev = o_ReadData;
	o_RegDstOut_prev = o_RegDstOut;
	o_WB_MemToReg_prev = o_WB_MemToReg;
	o_WB_RegWrite_prev = o_WB_RegWrite;
end

// update expected /o prevs

always @(trigger)
begin
	o_ALUResult_expected_prev = o_ALUResult_expected;
	o_ReadData_expected_prev = o_ReadData_expected;
	o_RegDstOut_expected_prev = o_RegDstOut_expected;
	o_WB_MemToReg_expected_prev = o_WB_MemToReg_expected;
	o_WB_RegWrite_expected_prev = o_WB_RegWrite_expected;
end


// expected o_ALUResult[ 7 ]
initial
begin
	o_ALUResult_expected[7] = 1'bX;
end 
// expected o_ALUResult[ 6 ]
initial
begin
	o_ALUResult_expected[6] = 1'bX;
end 
// expected o_ALUResult[ 5 ]
initial
begin
	o_ALUResult_expected[5] = 1'bX;
end 
// expected o_ALUResult[ 4 ]
initial
begin
	o_ALUResult_expected[4] = 1'bX;
end 
// expected o_ALUResult[ 3 ]
initial
begin
	o_ALUResult_expected[3] = 1'bX;
end 
// expected o_ALUResult[ 2 ]
initial
begin
	o_ALUResult_expected[2] = 1'bX;
end 
// expected o_ALUResult[ 1 ]
initial
begin
	o_ALUResult_expected[1] = 1'bX;
end 
// expected o_ALUResult[ 0 ]
initial
begin
	o_ALUResult_expected[0] = 1'bX;
end 
// expected o_ReadData[ 7 ]
initial
begin
	o_ReadData_expected[7] = 1'bX;
end 
// expected o_ReadData[ 6 ]
initial
begin
	o_ReadData_expected[6] = 1'bX;
end 
// expected o_ReadData[ 5 ]
initial
begin
	o_ReadData_expected[5] = 1'bX;
end 
// expected o_ReadData[ 4 ]
initial
begin
	o_ReadData_expected[4] = 1'bX;
end 
// expected o_ReadData[ 3 ]
initial
begin
	o_ReadData_expected[3] = 1'bX;
end 
// expected o_ReadData[ 2 ]
initial
begin
	o_ReadData_expected[2] = 1'bX;
end 
// expected o_ReadData[ 1 ]
initial
begin
	o_ReadData_expected[1] = 1'bX;
end 
// expected o_ReadData[ 0 ]
initial
begin
	o_ReadData_expected[0] = 1'bX;
end 
// expected o_RegDstOut[ 2 ]
initial
begin
	o_RegDstOut_expected[2] = 1'bX;
end 
// expected o_RegDstOut[ 1 ]
initial
begin
	o_RegDstOut_expected[1] = 1'bX;
end 
// expected o_RegDstOut[ 0 ]
initial
begin
	o_RegDstOut_expected[0] = 1'bX;
end 

// expected o_WB_MemToReg
initial
begin
	o_WB_MemToReg_expected = 1'bX;
end 

// expected o_WB_RegWrite
initial
begin
	o_WB_RegWrite_expected = 1'bX;
end 
// generate trigger
always @(o_ALUResult_expected or o_ALUResult or o_ReadData_expected or o_ReadData or o_RegDstOut_expected or o_RegDstOut or o_WB_MemToReg_expected or o_WB_MemToReg or o_WB_RegWrite_expected or o_WB_RegWrite)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o_ALUResult = %b | expected o_ReadData = %b | expected o_RegDstOut = %b | expected o_WB_MemToReg = %b | expected o_WB_RegWrite = %b | ",o_ALUResult_expected_prev,o_ReadData_expected_prev,o_RegDstOut_expected_prev,o_WB_MemToReg_expected_prev,o_WB_RegWrite_expected_prev);
	$display("| real o_ALUResult = %b | real o_ReadData = %b | real o_RegDstOut = %b | real o_WB_MemToReg = %b | real o_WB_RegWrite = %b | ",o_ALUResult_prev,o_ReadData_prev,o_RegDstOut_prev,o_WB_MemToReg_prev,o_WB_RegWrite_prev);
`endif
	if (
		( o_ALUResult_expected_prev[0] !== 1'bx ) && ( o_ALUResult_prev[0] !== o_ALUResult_expected_prev[0] )
		&& ((o_ALUResult_expected_prev[0] !== last_o_ALUResult_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ALUResult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ALUResult_expected_prev);
		$display ("     Real value = %b", o_ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_ALUResult_exp[0] = o_ALUResult_expected_prev[0];
	end
	if (
		( o_ALUResult_expected_prev[1] !== 1'bx ) && ( o_ALUResult_prev[1] !== o_ALUResult_expected_prev[1] )
		&& ((o_ALUResult_expected_prev[1] !== last_o_ALUResult_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ALUResult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ALUResult_expected_prev);
		$display ("     Real value = %b", o_ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_ALUResult_exp[1] = o_ALUResult_expected_prev[1];
	end
	if (
		( o_ALUResult_expected_prev[2] !== 1'bx ) && ( o_ALUResult_prev[2] !== o_ALUResult_expected_prev[2] )
		&& ((o_ALUResult_expected_prev[2] !== last_o_ALUResult_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ALUResult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ALUResult_expected_prev);
		$display ("     Real value = %b", o_ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_ALUResult_exp[2] = o_ALUResult_expected_prev[2];
	end
	if (
		( o_ALUResult_expected_prev[3] !== 1'bx ) && ( o_ALUResult_prev[3] !== o_ALUResult_expected_prev[3] )
		&& ((o_ALUResult_expected_prev[3] !== last_o_ALUResult_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ALUResult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ALUResult_expected_prev);
		$display ("     Real value = %b", o_ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_ALUResult_exp[3] = o_ALUResult_expected_prev[3];
	end
	if (
		( o_ALUResult_expected_prev[4] !== 1'bx ) && ( o_ALUResult_prev[4] !== o_ALUResult_expected_prev[4] )
		&& ((o_ALUResult_expected_prev[4] !== last_o_ALUResult_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ALUResult[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ALUResult_expected_prev);
		$display ("     Real value = %b", o_ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_ALUResult_exp[4] = o_ALUResult_expected_prev[4];
	end
	if (
		( o_ALUResult_expected_prev[5] !== 1'bx ) && ( o_ALUResult_prev[5] !== o_ALUResult_expected_prev[5] )
		&& ((o_ALUResult_expected_prev[5] !== last_o_ALUResult_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ALUResult[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ALUResult_expected_prev);
		$display ("     Real value = %b", o_ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_ALUResult_exp[5] = o_ALUResult_expected_prev[5];
	end
	if (
		( o_ALUResult_expected_prev[6] !== 1'bx ) && ( o_ALUResult_prev[6] !== o_ALUResult_expected_prev[6] )
		&& ((o_ALUResult_expected_prev[6] !== last_o_ALUResult_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ALUResult[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ALUResult_expected_prev);
		$display ("     Real value = %b", o_ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_ALUResult_exp[6] = o_ALUResult_expected_prev[6];
	end
	if (
		( o_ALUResult_expected_prev[7] !== 1'bx ) && ( o_ALUResult_prev[7] !== o_ALUResult_expected_prev[7] )
		&& ((o_ALUResult_expected_prev[7] !== last_o_ALUResult_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ALUResult[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ALUResult_expected_prev);
		$display ("     Real value = %b", o_ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_ALUResult_exp[7] = o_ALUResult_expected_prev[7];
	end
	if (
		( o_ReadData_expected_prev[0] !== 1'bx ) && ( o_ReadData_prev[0] !== o_ReadData_expected_prev[0] )
		&& ((o_ReadData_expected_prev[0] !== last_o_ReadData_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ReadData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ReadData_expected_prev);
		$display ("     Real value = %b", o_ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_ReadData_exp[0] = o_ReadData_expected_prev[0];
	end
	if (
		( o_ReadData_expected_prev[1] !== 1'bx ) && ( o_ReadData_prev[1] !== o_ReadData_expected_prev[1] )
		&& ((o_ReadData_expected_prev[1] !== last_o_ReadData_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ReadData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ReadData_expected_prev);
		$display ("     Real value = %b", o_ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_ReadData_exp[1] = o_ReadData_expected_prev[1];
	end
	if (
		( o_ReadData_expected_prev[2] !== 1'bx ) && ( o_ReadData_prev[2] !== o_ReadData_expected_prev[2] )
		&& ((o_ReadData_expected_prev[2] !== last_o_ReadData_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ReadData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ReadData_expected_prev);
		$display ("     Real value = %b", o_ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_ReadData_exp[2] = o_ReadData_expected_prev[2];
	end
	if (
		( o_ReadData_expected_prev[3] !== 1'bx ) && ( o_ReadData_prev[3] !== o_ReadData_expected_prev[3] )
		&& ((o_ReadData_expected_prev[3] !== last_o_ReadData_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ReadData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ReadData_expected_prev);
		$display ("     Real value = %b", o_ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_ReadData_exp[3] = o_ReadData_expected_prev[3];
	end
	if (
		( o_ReadData_expected_prev[4] !== 1'bx ) && ( o_ReadData_prev[4] !== o_ReadData_expected_prev[4] )
		&& ((o_ReadData_expected_prev[4] !== last_o_ReadData_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ReadData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ReadData_expected_prev);
		$display ("     Real value = %b", o_ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_ReadData_exp[4] = o_ReadData_expected_prev[4];
	end
	if (
		( o_ReadData_expected_prev[5] !== 1'bx ) && ( o_ReadData_prev[5] !== o_ReadData_expected_prev[5] )
		&& ((o_ReadData_expected_prev[5] !== last_o_ReadData_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ReadData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ReadData_expected_prev);
		$display ("     Real value = %b", o_ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_ReadData_exp[5] = o_ReadData_expected_prev[5];
	end
	if (
		( o_ReadData_expected_prev[6] !== 1'bx ) && ( o_ReadData_prev[6] !== o_ReadData_expected_prev[6] )
		&& ((o_ReadData_expected_prev[6] !== last_o_ReadData_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ReadData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ReadData_expected_prev);
		$display ("     Real value = %b", o_ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_ReadData_exp[6] = o_ReadData_expected_prev[6];
	end
	if (
		( o_ReadData_expected_prev[7] !== 1'bx ) && ( o_ReadData_prev[7] !== o_ReadData_expected_prev[7] )
		&& ((o_ReadData_expected_prev[7] !== last_o_ReadData_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_ReadData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_ReadData_expected_prev);
		$display ("     Real value = %b", o_ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_ReadData_exp[7] = o_ReadData_expected_prev[7];
	end
	if (
		( o_RegDstOut_expected_prev[0] !== 1'bx ) && ( o_RegDstOut_prev[0] !== o_RegDstOut_expected_prev[0] )
		&& ((o_RegDstOut_expected_prev[0] !== last_o_RegDstOut_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_RegDstOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_RegDstOut_expected_prev);
		$display ("     Real value = %b", o_RegDstOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o_RegDstOut_exp[0] = o_RegDstOut_expected_prev[0];
	end
	if (
		( o_RegDstOut_expected_prev[1] !== 1'bx ) && ( o_RegDstOut_prev[1] !== o_RegDstOut_expected_prev[1] )
		&& ((o_RegDstOut_expected_prev[1] !== last_o_RegDstOut_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_RegDstOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_RegDstOut_expected_prev);
		$display ("     Real value = %b", o_RegDstOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o_RegDstOut_exp[1] = o_RegDstOut_expected_prev[1];
	end
	if (
		( o_RegDstOut_expected_prev[2] !== 1'bx ) && ( o_RegDstOut_prev[2] !== o_RegDstOut_expected_prev[2] )
		&& ((o_RegDstOut_expected_prev[2] !== last_o_RegDstOut_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_RegDstOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_RegDstOut_expected_prev);
		$display ("     Real value = %b", o_RegDstOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o_RegDstOut_exp[2] = o_RegDstOut_expected_prev[2];
	end
	if (
		( o_WB_MemToReg_expected_prev !== 1'bx ) && ( o_WB_MemToReg_prev !== o_WB_MemToReg_expected_prev )
		&& ((o_WB_MemToReg_expected_prev !== last_o_WB_MemToReg_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_WB_MemToReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_WB_MemToReg_expected_prev);
		$display ("     Real value = %b", o_WB_MemToReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_WB_MemToReg_exp = o_WB_MemToReg_expected_prev;
	end
	if (
		( o_WB_RegWrite_expected_prev !== 1'bx ) && ( o_WB_RegWrite_prev !== o_WB_RegWrite_expected_prev )
		&& ((o_WB_RegWrite_expected_prev !== last_o_WB_RegWrite_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_WB_RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_WB_RegWrite_expected_prev);
		$display ("     Real value = %b", o_WB_RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_o_WB_RegWrite_exp = o_WB_RegWrite_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MEM_WB_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] i_ALUResult;
reg i_clock;
reg i_enable;
reg [7:0] i_ReadData;
reg [2:0] i_RegDstOut;
reg i_reset;
reg i_WB_MemToReg;
reg i_WB_RegWrite;
// wires                                               
wire [7:0] o_ALUResult;
wire [7:0] o_ReadData;
wire [2:0] o_RegDstOut;
wire o_WB_MemToReg;
wire o_WB_RegWrite;

wire sampler;                             

// assign statements (if any)                          
MEM_WB i1 (
// port map - connection between master ports and signals/registers   
	.i_ALUResult(i_ALUResult),
	.i_clock(i_clock),
	.i_enable(i_enable),
	.i_ReadData(i_ReadData),
	.i_RegDstOut(i_RegDstOut),
	.i_reset(i_reset),
	.i_WB_MemToReg(i_WB_MemToReg),
	.i_WB_RegWrite(i_WB_RegWrite),
	.o_ALUResult(o_ALUResult),
	.o_ReadData(o_ReadData),
	.o_RegDstOut(o_RegDstOut),
	.o_WB_MemToReg(o_WB_MemToReg),
	.o_WB_RegWrite(o_WB_RegWrite)
);

// i_clock
always
begin
	i_clock = 1'b0;
	i_clock = #20000 1'b1;
	#20000;
end 
// i_ALUResult[ 7 ]
initial
begin
	i_ALUResult[7] = 1'b0;
	i_ALUResult[7] = #20000 1'b1;
	i_ALUResult[7] = #120000 1'b0;
end 
// i_ALUResult[ 6 ]
initial
begin
	i_ALUResult[6] = 1'b0;
	i_ALUResult[6] = #60000 1'b1;
	i_ALUResult[6] = #80000 1'b0;
end 
// i_ALUResult[ 5 ]
initial
begin
	i_ALUResult[5] = 1'b0;
	i_ALUResult[5] = #110000 1'b1;
	i_ALUResult[5] = #30000 1'b0;
end 
// i_ALUResult[ 4 ]
initial
begin
	i_ALUResult[4] = 1'b0;
end 
// i_ALUResult[ 3 ]
initial
begin
	i_ALUResult[3] = 1'b0;
end 
// i_ALUResult[ 2 ]
initial
begin
	i_ALUResult[2] = 1'b0;
end 
// i_ALUResult[ 1 ]
initial
begin
	i_ALUResult[1] = 1'b0;
end 
// i_ALUResult[ 0 ]
initial
begin
	i_ALUResult[0] = 1'b0;
end 

// i_enable
initial
begin
	i_enable = 1'b0;
	i_enable = #20000 1'b1;
	i_enable = #40000 1'b0;
	i_enable = #40000 1'b1;
	i_enable = #80000 1'b0;
end 
// i_ReadData[ 7 ]
initial
begin
	i_ReadData[7] = 1'b0;
	i_ReadData[7] = #20000 1'b1;
	i_ReadData[7] = #120000 1'b0;
end 
// i_ReadData[ 6 ]
initial
begin
	i_ReadData[6] = 1'b0;
	i_ReadData[6] = #60000 1'b1;
	i_ReadData[6] = #80000 1'b0;
end 
// i_ReadData[ 5 ]
initial
begin
	i_ReadData[5] = 1'b0;
	i_ReadData[5] = #60000 1'b1;
	i_ReadData[5] = #80000 1'b0;
end 
// i_ReadData[ 4 ]
initial
begin
	i_ReadData[4] = 1'b0;
end 
// i_ReadData[ 3 ]
initial
begin
	i_ReadData[3] = 1'b0;
end 
// i_ReadData[ 2 ]
initial
begin
	i_ReadData[2] = 1'b0;
end 
// i_ReadData[ 1 ]
initial
begin
	i_ReadData[1] = 1'b0;
end 
// i_ReadData[ 0 ]
initial
begin
	i_ReadData[0] = 1'b0;
end 
// i_RegDstOut[ 2 ]
initial
begin
	i_RegDstOut[2] = 1'b0;
	i_RegDstOut[2] = #20000 1'b1;
	i_RegDstOut[2] = #120000 1'b0;
end 
// i_RegDstOut[ 1 ]
initial
begin
	i_RegDstOut[1] = 1'b0;
	i_RegDstOut[1] = #60000 1'b1;
	i_RegDstOut[1] = #80000 1'b0;
end 
// i_RegDstOut[ 0 ]
initial
begin
	i_RegDstOut[0] = 1'b0;
	i_RegDstOut[0] = #100000 1'b1;
	i_RegDstOut[0] = #40000 1'b0;
end 

// i_reset
initial
begin
	i_reset = 1'b0;
end 

// i_WB_MemToReg
initial
begin
	i_WB_MemToReg = 1'b0;
	i_WB_MemToReg = #20000 1'b1;
	i_WB_MemToReg = #40000 1'b0;
	i_WB_MemToReg = #40000 1'b1;
	i_WB_MemToReg = #40000 1'b0;
end 

// i_WB_RegWrite
initial
begin
	i_WB_RegWrite = 1'b0;
	i_WB_RegWrite = #20000 1'b1;
	i_WB_RegWrite = #40000 1'b0;
	i_WB_RegWrite = #40000 1'b1;
	i_WB_RegWrite = #40000 1'b0;
end 

MEM_WB_vlg_sample_tst tb_sample (
	.i_ALUResult(i_ALUResult),
	.i_clock(i_clock),
	.i_enable(i_enable),
	.i_ReadData(i_ReadData),
	.i_RegDstOut(i_RegDstOut),
	.i_reset(i_reset),
	.i_WB_MemToReg(i_WB_MemToReg),
	.i_WB_RegWrite(i_WB_RegWrite),
	.sampler_tx(sampler)
);

MEM_WB_vlg_check_tst tb_out(
	.o_ALUResult(o_ALUResult),
	.o_ReadData(o_ReadData),
	.o_RegDstOut(o_RegDstOut),
	.o_WB_MemToReg(o_WB_MemToReg),
	.o_WB_RegWrite(o_WB_RegWrite),
	.sampler_rx(sampler)
);
endmodule

