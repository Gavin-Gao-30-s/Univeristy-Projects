// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/14/2025 22:49:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FP_16bit_Adder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FP_16bit_Adder_vlg_sample_tst(
	ExponentA,
	ExponentB,
	GCLOCK,
	GRESET,
	MantissaA,
	MantissaB,
	signA,
	signB,
	sampler_tx
);
input [6:0] ExponentA;
input [6:0] ExponentB;
input  GCLOCK;
input  GRESET;
input [7:0] MantissaA;
input [7:0] MantissaB;
input  signA;
input  signB;
output sampler_tx;

reg sample;
time current_time;
always @(ExponentA or ExponentB or GCLOCK or GRESET or MantissaA or MantissaB or signA or signB)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FP_16bit_Adder_vlg_check_tst (
	ExponentOut,
	MantissaOut,
	OVERFLOW,
	S0,
	S1,
	S2,
	S3,
	S4,
	S5,
	S6,
	S7,
	S8,
	S9,
	S10,
	S11,
	SignOut,
	sampler_rx
);
input [6:0] ExponentOut;
input [7:0] MantissaOut;
input  OVERFLOW;
input  S0;
input  S1;
input  S2;
input  S3;
input  S4;
input  S5;
input  S6;
input  S7;
input  S8;
input  S9;
input  S10;
input  S11;
input  SignOut;
input sampler_rx;

reg [6:0] ExponentOut_expected;
reg [7:0] MantissaOut_expected;
reg  OVERFLOW_expected;
reg  S0_expected;
reg  S1_expected;
reg  S2_expected;
reg  S3_expected;
reg  S4_expected;
reg  S5_expected;
reg  S6_expected;
reg  S7_expected;
reg  S8_expected;
reg  S9_expected;
reg  S10_expected;
reg  S11_expected;
reg  SignOut_expected;

reg [6:0] ExponentOut_prev;
reg [7:0] MantissaOut_prev;
reg  OVERFLOW_prev;
reg  S0_prev;
reg  S1_prev;
reg  S2_prev;
reg  S3_prev;
reg  S4_prev;
reg  S5_prev;
reg  S6_prev;
reg  S7_prev;
reg  S8_prev;
reg  S9_prev;
reg  S10_prev;
reg  S11_prev;
reg  SignOut_prev;

reg [6:0] ExponentOut_expected_prev;
reg [7:0] MantissaOut_expected_prev;
reg  OVERFLOW_expected_prev;
reg  S0_expected_prev;
reg  S1_expected_prev;
reg  S2_expected_prev;
reg  S3_expected_prev;
reg  S4_expected_prev;
reg  S5_expected_prev;
reg  S6_expected_prev;
reg  S7_expected_prev;
reg  S8_expected_prev;
reg  S9_expected_prev;
reg  S10_expected_prev;
reg  S11_expected_prev;
reg  SignOut_expected_prev;

reg [6:0] last_ExponentOut_exp;
reg [7:0] last_MantissaOut_exp;
reg  last_OVERFLOW_exp;
reg  last_S0_exp;
reg  last_S1_exp;
reg  last_S2_exp;
reg  last_S3_exp;
reg  last_S4_exp;
reg  last_S5_exp;
reg  last_S6_exp;
reg  last_S7_exp;
reg  last_S8_exp;
reg  last_S9_exp;
reg  last_S10_exp;
reg  last_S11_exp;
reg  last_SignOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	ExponentOut_prev = ExponentOut;
	MantissaOut_prev = MantissaOut;
	OVERFLOW_prev = OVERFLOW;
	S0_prev = S0;
	S1_prev = S1;
	S2_prev = S2;
	S3_prev = S3;
	S4_prev = S4;
	S5_prev = S5;
	S6_prev = S6;
	S7_prev = S7;
	S8_prev = S8;
	S9_prev = S9;
	S10_prev = S10;
	S11_prev = S11;
	SignOut_prev = SignOut;
end

// update expected /o prevs

always @(trigger)
begin
	ExponentOut_expected_prev = ExponentOut_expected;
	MantissaOut_expected_prev = MantissaOut_expected;
	OVERFLOW_expected_prev = OVERFLOW_expected;
	S0_expected_prev = S0_expected;
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
	S3_expected_prev = S3_expected;
	S4_expected_prev = S4_expected;
	S5_expected_prev = S5_expected;
	S6_expected_prev = S6_expected;
	S7_expected_prev = S7_expected;
	S8_expected_prev = S8_expected;
	S9_expected_prev = S9_expected;
	S10_expected_prev = S10_expected;
	S11_expected_prev = S11_expected;
	SignOut_expected_prev = SignOut_expected;
end


// expected ExponentOut[ 6 ]
initial
begin
	ExponentOut_expected[6] = 1'bX;
end 
// expected ExponentOut[ 5 ]
initial
begin
	ExponentOut_expected[5] = 1'bX;
end 
// expected ExponentOut[ 4 ]
initial
begin
	ExponentOut_expected[4] = 1'bX;
end 
// expected ExponentOut[ 3 ]
initial
begin
	ExponentOut_expected[3] = 1'bX;
end 
// expected ExponentOut[ 2 ]
initial
begin
	ExponentOut_expected[2] = 1'bX;
end 
// expected ExponentOut[ 1 ]
initial
begin
	ExponentOut_expected[1] = 1'bX;
end 
// expected ExponentOut[ 0 ]
initial
begin
	ExponentOut_expected[0] = 1'bX;
end 
// expected MantissaOut[ 7 ]
initial
begin
	MantissaOut_expected[7] = 1'bX;
end 
// expected MantissaOut[ 6 ]
initial
begin
	MantissaOut_expected[6] = 1'bX;
end 
// expected MantissaOut[ 5 ]
initial
begin
	MantissaOut_expected[5] = 1'bX;
end 
// expected MantissaOut[ 4 ]
initial
begin
	MantissaOut_expected[4] = 1'bX;
end 
// expected MantissaOut[ 3 ]
initial
begin
	MantissaOut_expected[3] = 1'bX;
end 
// expected MantissaOut[ 2 ]
initial
begin
	MantissaOut_expected[2] = 1'bX;
end 
// expected MantissaOut[ 1 ]
initial
begin
	MantissaOut_expected[1] = 1'bX;
end 
// expected MantissaOut[ 0 ]
initial
begin
	MantissaOut_expected[0] = 1'bX;
end 

// expected OVERFLOW
initial
begin
	OVERFLOW_expected = 1'bX;
end 

// expected S0
initial
begin
	S0_expected = 1'bX;
end 

// expected S1
initial
begin
	S1_expected = 1'bX;
end 

// expected S2
initial
begin
	S2_expected = 1'bX;
end 

// expected S3
initial
begin
	S3_expected = 1'bX;
end 

// expected S4
initial
begin
	S4_expected = 1'bX;
end 

// expected S5
initial
begin
	S5_expected = 1'bX;
end 

// expected S6
initial
begin
	S6_expected = 1'bX;
end 

// expected S7
initial
begin
	S7_expected = 1'bX;
end 

// expected S8
initial
begin
	S8_expected = 1'bX;
end 

// expected S9
initial
begin
	S9_expected = 1'bX;
end 

// expected S10
initial
begin
	S10_expected = 1'bX;
end 

// expected S11
initial
begin
	S11_expected = 1'bX;
end 

// expected SignOut
initial
begin
	SignOut_expected = 1'bX;
end 
// generate trigger
always @(ExponentOut_expected or ExponentOut or MantissaOut_expected or MantissaOut or OVERFLOW_expected or OVERFLOW or S0_expected or S0 or S1_expected or S1 or S2_expected or S2 or S3_expected or S3 or S4_expected or S4 or S5_expected or S5 or S6_expected or S6 or S7_expected or S7 or S8_expected or S8 or S9_expected or S9 or S10_expected or S10 or S11_expected or S11 or SignOut_expected or SignOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ExponentOut = %b | expected MantissaOut = %b | expected OVERFLOW = %b | expected S0 = %b | expected S1 = %b | expected S2 = %b | expected S3 = %b | expected S4 = %b | expected S5 = %b | expected S6 = %b | expected S7 = %b | expected S8 = %b | expected S9 = %b | expected S10 = %b | expected S11 = %b | expected SignOut = %b | ",ExponentOut_expected_prev,MantissaOut_expected_prev,OVERFLOW_expected_prev,S0_expected_prev,S1_expected_prev,S2_expected_prev,S3_expected_prev,S4_expected_prev,S5_expected_prev,S6_expected_prev,S7_expected_prev,S8_expected_prev,S9_expected_prev,S10_expected_prev,S11_expected_prev,SignOut_expected_prev);
	$display("| real ExponentOut = %b | real MantissaOut = %b | real OVERFLOW = %b | real S0 = %b | real S1 = %b | real S2 = %b | real S3 = %b | real S4 = %b | real S5 = %b | real S6 = %b | real S7 = %b | real S8 = %b | real S9 = %b | real S10 = %b | real S11 = %b | real SignOut = %b | ",ExponentOut_prev,MantissaOut_prev,OVERFLOW_prev,S0_prev,S1_prev,S2_prev,S3_prev,S4_prev,S5_prev,S6_prev,S7_prev,S8_prev,S9_prev,S10_prev,S11_prev,SignOut_prev);
`endif
	if (
		( ExponentOut_expected_prev[0] !== 1'bx ) && ( ExponentOut_prev[0] !== ExponentOut_expected_prev[0] )
		&& ((ExponentOut_expected_prev[0] !== last_ExponentOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ExponentOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ExponentOut_expected_prev);
		$display ("     Real value = %b", ExponentOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ExponentOut_exp[0] = ExponentOut_expected_prev[0];
	end
	if (
		( ExponentOut_expected_prev[1] !== 1'bx ) && ( ExponentOut_prev[1] !== ExponentOut_expected_prev[1] )
		&& ((ExponentOut_expected_prev[1] !== last_ExponentOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ExponentOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ExponentOut_expected_prev);
		$display ("     Real value = %b", ExponentOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ExponentOut_exp[1] = ExponentOut_expected_prev[1];
	end
	if (
		( ExponentOut_expected_prev[2] !== 1'bx ) && ( ExponentOut_prev[2] !== ExponentOut_expected_prev[2] )
		&& ((ExponentOut_expected_prev[2] !== last_ExponentOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ExponentOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ExponentOut_expected_prev);
		$display ("     Real value = %b", ExponentOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ExponentOut_exp[2] = ExponentOut_expected_prev[2];
	end
	if (
		( ExponentOut_expected_prev[3] !== 1'bx ) && ( ExponentOut_prev[3] !== ExponentOut_expected_prev[3] )
		&& ((ExponentOut_expected_prev[3] !== last_ExponentOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ExponentOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ExponentOut_expected_prev);
		$display ("     Real value = %b", ExponentOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ExponentOut_exp[3] = ExponentOut_expected_prev[3];
	end
	if (
		( ExponentOut_expected_prev[4] !== 1'bx ) && ( ExponentOut_prev[4] !== ExponentOut_expected_prev[4] )
		&& ((ExponentOut_expected_prev[4] !== last_ExponentOut_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ExponentOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ExponentOut_expected_prev);
		$display ("     Real value = %b", ExponentOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ExponentOut_exp[4] = ExponentOut_expected_prev[4];
	end
	if (
		( ExponentOut_expected_prev[5] !== 1'bx ) && ( ExponentOut_prev[5] !== ExponentOut_expected_prev[5] )
		&& ((ExponentOut_expected_prev[5] !== last_ExponentOut_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ExponentOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ExponentOut_expected_prev);
		$display ("     Real value = %b", ExponentOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ExponentOut_exp[5] = ExponentOut_expected_prev[5];
	end
	if (
		( ExponentOut_expected_prev[6] !== 1'bx ) && ( ExponentOut_prev[6] !== ExponentOut_expected_prev[6] )
		&& ((ExponentOut_expected_prev[6] !== last_ExponentOut_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ExponentOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ExponentOut_expected_prev);
		$display ("     Real value = %b", ExponentOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ExponentOut_exp[6] = ExponentOut_expected_prev[6];
	end
	if (
		( MantissaOut_expected_prev[0] !== 1'bx ) && ( MantissaOut_prev[0] !== MantissaOut_expected_prev[0] )
		&& ((MantissaOut_expected_prev[0] !== last_MantissaOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MantissaOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MantissaOut_expected_prev);
		$display ("     Real value = %b", MantissaOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MantissaOut_exp[0] = MantissaOut_expected_prev[0];
	end
	if (
		( MantissaOut_expected_prev[1] !== 1'bx ) && ( MantissaOut_prev[1] !== MantissaOut_expected_prev[1] )
		&& ((MantissaOut_expected_prev[1] !== last_MantissaOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MantissaOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MantissaOut_expected_prev);
		$display ("     Real value = %b", MantissaOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MantissaOut_exp[1] = MantissaOut_expected_prev[1];
	end
	if (
		( MantissaOut_expected_prev[2] !== 1'bx ) && ( MantissaOut_prev[2] !== MantissaOut_expected_prev[2] )
		&& ((MantissaOut_expected_prev[2] !== last_MantissaOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MantissaOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MantissaOut_expected_prev);
		$display ("     Real value = %b", MantissaOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MantissaOut_exp[2] = MantissaOut_expected_prev[2];
	end
	if (
		( MantissaOut_expected_prev[3] !== 1'bx ) && ( MantissaOut_prev[3] !== MantissaOut_expected_prev[3] )
		&& ((MantissaOut_expected_prev[3] !== last_MantissaOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MantissaOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MantissaOut_expected_prev);
		$display ("     Real value = %b", MantissaOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MantissaOut_exp[3] = MantissaOut_expected_prev[3];
	end
	if (
		( MantissaOut_expected_prev[4] !== 1'bx ) && ( MantissaOut_prev[4] !== MantissaOut_expected_prev[4] )
		&& ((MantissaOut_expected_prev[4] !== last_MantissaOut_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MantissaOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MantissaOut_expected_prev);
		$display ("     Real value = %b", MantissaOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MantissaOut_exp[4] = MantissaOut_expected_prev[4];
	end
	if (
		( MantissaOut_expected_prev[5] !== 1'bx ) && ( MantissaOut_prev[5] !== MantissaOut_expected_prev[5] )
		&& ((MantissaOut_expected_prev[5] !== last_MantissaOut_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MantissaOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MantissaOut_expected_prev);
		$display ("     Real value = %b", MantissaOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MantissaOut_exp[5] = MantissaOut_expected_prev[5];
	end
	if (
		( MantissaOut_expected_prev[6] !== 1'bx ) && ( MantissaOut_prev[6] !== MantissaOut_expected_prev[6] )
		&& ((MantissaOut_expected_prev[6] !== last_MantissaOut_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MantissaOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MantissaOut_expected_prev);
		$display ("     Real value = %b", MantissaOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MantissaOut_exp[6] = MantissaOut_expected_prev[6];
	end
	if (
		( MantissaOut_expected_prev[7] !== 1'bx ) && ( MantissaOut_prev[7] !== MantissaOut_expected_prev[7] )
		&& ((MantissaOut_expected_prev[7] !== last_MantissaOut_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MantissaOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MantissaOut_expected_prev);
		$display ("     Real value = %b", MantissaOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MantissaOut_exp[7] = MantissaOut_expected_prev[7];
	end
	if (
		( OVERFLOW_expected_prev !== 1'bx ) && ( OVERFLOW_prev !== OVERFLOW_expected_prev )
		&& ((OVERFLOW_expected_prev !== last_OVERFLOW_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVERFLOW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVERFLOW_expected_prev);
		$display ("     Real value = %b", OVERFLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OVERFLOW_exp = OVERFLOW_expected_prev;
	end
	if (
		( S0_expected_prev !== 1'bx ) && ( S0_prev !== S0_expected_prev )
		&& ((S0_expected_prev !== last_S0_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_S0_exp = S0_expected_prev;
	end
	if (
		( S1_expected_prev !== 1'bx ) && ( S1_prev !== S1_expected_prev )
		&& ((S1_expected_prev !== last_S1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S1_exp = S1_expected_prev;
	end
	if (
		( S2_expected_prev !== 1'bx ) && ( S2_prev !== S2_expected_prev )
		&& ((S2_expected_prev !== last_S2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S2_exp = S2_expected_prev;
	end
	if (
		( S3_expected_prev !== 1'bx ) && ( S3_prev !== S3_expected_prev )
		&& ((S3_expected_prev !== last_S3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S3_expected_prev);
		$display ("     Real value = %b", S3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_S3_exp = S3_expected_prev;
	end
	if (
		( S4_expected_prev !== 1'bx ) && ( S4_prev !== S4_expected_prev )
		&& ((S4_expected_prev !== last_S4_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S4_expected_prev);
		$display ("     Real value = %b", S4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S4_exp = S4_expected_prev;
	end
	if (
		( S5_expected_prev !== 1'bx ) && ( S5_prev !== S5_expected_prev )
		&& ((S5_expected_prev !== last_S5_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S5_expected_prev);
		$display ("     Real value = %b", S5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S5_exp = S5_expected_prev;
	end
	if (
		( S6_expected_prev !== 1'bx ) && ( S6_prev !== S6_expected_prev )
		&& ((S6_expected_prev !== last_S6_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S6_expected_prev);
		$display ("     Real value = %b", S6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S6_exp = S6_expected_prev;
	end
	if (
		( S7_expected_prev !== 1'bx ) && ( S7_prev !== S7_expected_prev )
		&& ((S7_expected_prev !== last_S7_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S7_expected_prev);
		$display ("     Real value = %b", S7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_S7_exp = S7_expected_prev;
	end
	if (
		( S8_expected_prev !== 1'bx ) && ( S8_prev !== S8_expected_prev )
		&& ((S8_expected_prev !== last_S8_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S8_expected_prev);
		$display ("     Real value = %b", S8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_S8_exp = S8_expected_prev;
	end
	if (
		( S9_expected_prev !== 1'bx ) && ( S9_prev !== S9_expected_prev )
		&& ((S9_expected_prev !== last_S9_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S9_expected_prev);
		$display ("     Real value = %b", S9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_S9_exp = S9_expected_prev;
	end
	if (
		( S10_expected_prev !== 1'bx ) && ( S10_prev !== S10_expected_prev )
		&& ((S10_expected_prev !== last_S10_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S10_expected_prev);
		$display ("     Real value = %b", S10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_S10_exp = S10_expected_prev;
	end
	if (
		( S11_expected_prev !== 1'bx ) && ( S11_prev !== S11_expected_prev )
		&& ((S11_expected_prev !== last_S11_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S11_expected_prev);
		$display ("     Real value = %b", S11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_S11_exp = S11_expected_prev;
	end
	if (
		( SignOut_expected_prev !== 1'bx ) && ( SignOut_prev !== SignOut_expected_prev )
		&& ((SignOut_expected_prev !== last_SignOut_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SignOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SignOut_expected_prev);
		$display ("     Real value = %b", SignOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SignOut_exp = SignOut_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FP_16bit_Adder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] ExponentA;
reg [6:0] ExponentB;
reg GCLOCK;
reg GRESET;
reg [7:0] MantissaA;
reg [7:0] MantissaB;
reg signA;
reg signB;
// wires                                               
wire [6:0] ExponentOut;
wire [7:0] MantissaOut;
wire OVERFLOW;
wire S0;
wire S1;
wire S2;
wire S3;
wire S4;
wire S5;
wire S6;
wire S7;
wire S8;
wire S9;
wire S10;
wire S11;
wire SignOut;

wire sampler;                             

// assign statements (if any)                          
FP_16bit_Adder i1 (
// port map - connection between master ports and signals/registers   
	.ExponentA(ExponentA),
	.ExponentB(ExponentB),
	.ExponentOut(ExponentOut),
	.GCLOCK(GCLOCK),
	.GRESET(GRESET),
	.MantissaA(MantissaA),
	.MantissaB(MantissaB),
	.MantissaOut(MantissaOut),
	.OVERFLOW(OVERFLOW),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7),
	.S8(S8),
	.S9(S9),
	.S10(S10),
	.S11(S11),
	.signA(signA),
	.signB(signB),
	.SignOut(SignOut)
);
// ExponentA[ 6 ]
initial
begin
	ExponentA[6] = 1'b1;
end 
// ExponentA[ 5 ]
initial
begin
	ExponentA[5] = 1'b0;
end 
// ExponentA[ 4 ]
initial
begin
	ExponentA[4] = 1'b0;
end 
// ExponentA[ 3 ]
initial
begin
	ExponentA[3] = 1'b0;
end 
// ExponentA[ 2 ]
initial
begin
	ExponentA[2] = 1'b0;
end 
// ExponentA[ 1 ]
initial
begin
	ExponentA[1] = 1'b1;
end 
// ExponentA[ 0 ]
initial
begin
	ExponentA[0] = 1'b0;
end 
// ExponentB[ 6 ]
initial
begin
	ExponentB[6] = 1'b1;
end 
// ExponentB[ 5 ]
initial
begin
	ExponentB[5] = 1'b0;
end 
// ExponentB[ 4 ]
initial
begin
	ExponentB[4] = 1'b0;
end 
// ExponentB[ 3 ]
initial
begin
	ExponentB[3] = 1'b0;
end 
// ExponentB[ 2 ]
initial
begin
	ExponentB[2] = 1'b1;
end 
// ExponentB[ 1 ]
initial
begin
	ExponentB[1] = 1'b0;
end 
// ExponentB[ 0 ]
initial
begin
	ExponentB[0] = 1'b0;
end 

// GCLOCK
always
begin
	GCLOCK = 1'b0;
	GCLOCK = #20000 1'b1;
	#20000;
end 

// GRESET
initial
begin
	GRESET = 1'b0;
	GRESET = #20000 1'b1;
	GRESET = #40000 1'b0;
end 
// MantissaA[ 7 ]
initial
begin
	MantissaA[7] = 1'b1;
end 
// MantissaA[ 6 ]
initial
begin
	MantissaA[6] = 1'b0;
end 
// MantissaA[ 5 ]
initial
begin
	MantissaA[5] = 1'b0;
end 
// MantissaA[ 4 ]
initial
begin
	MantissaA[4] = 1'b0;
end 
// MantissaA[ 3 ]
initial
begin
	MantissaA[3] = 1'b0;
end 
// MantissaA[ 2 ]
initial
begin
	MantissaA[2] = 1'b0;
end 
// MantissaA[ 1 ]
initial
begin
	MantissaA[1] = 1'b0;
end 
// MantissaA[ 0 ]
initial
begin
	MantissaA[0] = 1'b0;
end 
// MantissaB[ 7 ]
initial
begin
	MantissaB[7] = 1'b0;
end 
// MantissaB[ 6 ]
initial
begin
	MantissaB[6] = 1'b0;
end 
// MantissaB[ 5 ]
initial
begin
	MantissaB[5] = 1'b0;
end 
// MantissaB[ 4 ]
initial
begin
	MantissaB[4] = 1'b1;
end 
// MantissaB[ 3 ]
initial
begin
	MantissaB[3] = 1'b1;
end 
// MantissaB[ 2 ]
initial
begin
	MantissaB[2] = 1'b0;
end 
// MantissaB[ 1 ]
initial
begin
	MantissaB[1] = 1'b0;
end 
// MantissaB[ 0 ]
initial
begin
	MantissaB[0] = 1'b0;
end 

// signA
initial
begin
	signA = 1'b1;
end 

// signB
initial
begin
	signB = 1'b1;
end 

FP_16bit_Adder_vlg_sample_tst tb_sample (
	.ExponentA(ExponentA),
	.ExponentB(ExponentB),
	.GCLOCK(GCLOCK),
	.GRESET(GRESET),
	.MantissaA(MantissaA),
	.MantissaB(MantissaB),
	.signA(signA),
	.signB(signB),
	.sampler_tx(sampler)
);

FP_16bit_Adder_vlg_check_tst tb_out(
	.ExponentOut(ExponentOut),
	.MantissaOut(MantissaOut),
	.OVERFLOW(OVERFLOW),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7),
	.S8(S8),
	.S9(S9),
	.S10(S10),
	.S11(S11),
	.SignOut(SignOut),
	.sampler_rx(sampler)
);
endmodule

